package com.project;

import lombok.Getter;
import lombok.Setter;
import org.apache.commons.math3.random.RandomDataGenerator;

/**
 * Represents an asteroid in the game, inheriting from {@link Character}.
 * <p>
 * An asteroid rotates and moves in random directions with a random speed. Its
 * rotation and speed are initialized randomly to simulate unique and dynamic
 * behavior for each asteroid.
 * </p>
 */
@Getter
@Setter
public class Asteroid extends Character {
  
  /**
   * Rotation speed of the asteroid.
   * <p>
   * Determines how much the asteroid rotates on each frame update.
   * </p>
   */
  private double rotation;
  
  /**
   * Creates an Asteroid at a specified position with random speed and rotation.
   * <p>
   * The asteroid is initialized with a random rotation and speed to simulate
   * natural movement. The polygon shape for the asteroid is generated by the
   * {@link PolygonFactory}.
   * </p>
   *
   * @param x X-coordinate of the asteroid's initial position.
   * @param y Y-coordinate of the asteroid's initial position.
   */
  public Asteroid(int x, int y) {
    super(new PolygonFactory().createPolygon(), x, y);
    RandomDataGenerator randomDataGenerator = new RandomDataGenerator();
    
    // Set random rotation
    this.getCharacter().setRotate(randomDataGenerator.nextUniform(0, 360));
    this.rotation = randomDataGenerator.nextUniform(-0.5, 0.5);
    
    // Set random speed
    int acceleration = randomDataGenerator.nextInt(1, 7);
    for (int i = 0; i < acceleration; i++) {
      this.accelerate();
    }
  }
  
  /**
   * Moves the asteroid and rotates it.
   * <p>
   * This method extends the movement logic of the {@link Character#move()} method
   * by adding rotation to the asteroid on each frame update.
   * </p>
   */
  @Override
  public void move() {
    super.move();
    this.getCharacter().setRotate(this.getCharacter().getRotate() + this.rotation);
  }
}
